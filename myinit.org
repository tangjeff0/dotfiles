* Org Mode Restart
for some reason, if i `find-file` in my `init.el` on .org files, any org files that are not the last found file do not have org bullets
#+BEGIN_SRC emacs-lisp
;; (org-mode-restart)
#+END_SRC
* GUI
** Theme
   #+BEGIN_SRC emacs-lisp
     (use-package seoul256-theme
 :ensure t
 :config (load-theme 'seoul256 t))
   #+END_SRC
** Word Wrap
#+BEGIN_SRC emacs-lisp
(global-visual-line-mode t)
#+END_SRC
** Font / Face
*** Size
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :height 180)
#+END_SRC
*** Icons
    #+BEGIN_SRC emacs-lisp
      (use-package all-the-icons
	:ensure t)
    #+END_SRC
** Cursor
   Adaptive cursor width shows width of character, e.g. TAB. Via [[http://pragmaticemacs.com/emacs/adaptive-cursor-width/][Pragmatic Emacs]].
   #+BEGIN_SRC emacs-lisp
 (setq x-stretch-cursor t)
   #+END_SRC
** Tool Bar
   #+BEGIN_SRC emacs-lisp
   (if (fboundp 'menu-bar-mode) (menu-bar-mode 1))
   (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
   (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
   #+END_SRC
** Linenumbers
    #+BEGIN_SRC emacs-lisp
(global-display-line-numbers-mode)
(use-package linum-relative
:ensure t
:config
(require 'linum-relative)
(linum-relative-mode))
    #+END_SRC
** Prompts
 #+BEGIN_SRC emacs-lisp
   (fset 'yes-or-no-p 'y-or-n-p)
 #+END_SRC
** Parentheses
   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-delimiters
 :ensure t
 :config (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
   #+END_SRC
#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
  (setq show-paren-style 'expression)

#+END_SRC
** Beacon
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :config (beacon-mode 1))

#+END_SRC
** Indent
#+BEGIN_SRC emacs-lisp
  ;; make indentation commands use space only (never tab character)
  (progn
    (setq-default indent-tabs-mode nil))
  (setq-default tab-width 2)
#+END_SRC

** Scroll Margin
   #+BEGIN_SRC emacs-lisp
     (setq scroll-margin 10)
   #+END_SRC
** Maximized
   #+BEGIN_SRC emacs-lisp
   (toggle-frame-maximized)
   #+END_SRC
* Async
 #+BEGIN_SRC emacs-lisp
   (use-package async
     :init
     (autoload 'dired-async-mode "dired-async.el" nil t)
     (dired-async-mode 1)
     (async-bytecomp-package-mode 1)
     (autoload 'dired-async-mode "dired-async.el" nil t)
     (async-bytecomp-package-mode 1)
     (dired-async-mode 1)
     (require 'smtpmail-async)
     (setq send-mail-function 'async-smtpmail-send-it))
 #+END_SRC
* Dired-X
#+BEGIN_SRC emacs-lisp
(require 'dired-x)
#+END_SRC
* Org Mode
** Settings
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/Dropbox/org")
(setq org-mobile-inbox-for-pull "~/Dropbox/org/flagged.org")
(setq org-mobile-directory "~/Dropbox/Apps/MobileOrg")
(setq org-startup-with-inline-images t)
#+END_SRC
** Time
#+BEGIN_SRC emacs-lisp
(setq org-log-done 'time)
#+END_SRC
** Keybindings
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cb" 'org-switchb)
#+END_SRC
** Todo
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords
  '((sequence "TODO(t)" "|" "DONE(x)" "CANCELLED(c)")))
  (setq org-todo-keyword-faces
        '(("CANCELLED" . "yellow")))
#+END_SRC
** Bullets
#+BEGIN_SRC emacs-lisp
    (use-package org-bullets
    :ensure t
    :config
    (require 'org-bullets)
    (custom-set-faces
      '(org-level-1 ((t (:inherit outline-1 :height 1.0))))
      '(org-level-2 ((t (:inherit outline-2 :height 1.0))))
      '(org-level-3 ((t (:inherit outline-3 :height 1.0))))
      '(org-level-4 ((t (:inherit outline-4 :height 1.0))))
      '(org-level-5 ((t (:inherit outline-5 :height 1.0))))
    )
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  (org-bullets-mode))
#+END_SRC

** Capture
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
        '(("t" "Task" entry (file+headline "~/Dropbox/org/idx.org" "Tasks") "* TODO %i%?\n")
          ("a" "Appointment" entry (file  "~/Dropbox/org/gcal.org" ) "* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n")
          ;; ("p" "Project" entry (file+olp+datetree "~/Dropbox/org/review.org" "Monthly") (file "~/Dropbox/org/templates/Monthly.org"))
          ("d" "Daily Review" entry (file+olp+datetree "~/Dropbox/org/review.org" "Daily") (file "~/Dropbox/org/templates/daily.org"))
          ("w" "Weekly Review" entry (file+olp+datetree "~/Dropbox/org/review.org" "Weekly") (file "~/Dropbox/org/templates/Weekly.org"))
          ("m" "Monthly Review" entry (file+olp+datetree "~/Dropbox/org/review.org" "Monthly") (file "~/Dropbox/org/templates/Monthly.org"))
          ))
#+END_SRC
** Agenda
*** Files
    #+BEGIN_SRC emacs-lisp
      (setq org-agenda-files (list "~/Dropbox/org/gcal.org"
				   "~/Dropbox/org/idx.org"))
    #+END_SRC
*** Config
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-inhibit-startup nil
	org-agenda-show-future-repeats nil
	org-agenda-start-on-weekday nil
	org-agenda-skip-deadline-if-done t
	org-agenda-skip-scheduled-if-done t)
#+END_SRC
*** Custom Commands
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-custom-commands
	'(("d" "Daily Review"
	   ((agenda "" ((org-agenda-span 1)))
	    (todo ""
	 ((org-agenda-overriding-header "Unscheduled TODOs")
		(org-agenda-skip-function '(org-agenda-skip-entry-if 'timestamp))))
	   ))))
#+END_SRC
** Archive
   #+BEGIN_SRC emacs-lisp


   #+END_SRC
** Link
  =org-cliplink= lets you insert a link from your clipboard with a title that is fetched from the page's metadata.

  #+BEGIN_SRC emacs-lisp
    (use-package org-cliplink
      :bind ("C-x p i" . org-cliplink))
  #+END_SRC
** Download
#+BEGIN_SRC emacs-lisp
  (use-package org-download
    :config
    (add-hook 'dired-mode-hook 'org-download-enable)
    (setq org-download-timestamp t)
  )

#+END_SRC
** TODO Export
*** Presentation
* Imenu
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-i") 'imenu)
#+END_SRC
* Mu4e
#+BEGIN_SRC emacs-lisp
  ;; (add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu/mu4e")
  ;; (require 'mu4e)
  ;; (setq
  ;;   mu4e-maildir "~/Maildir/tangj1122")
#+END_SRC
* Evil
  #+BEGIN_SRC emacs-lisp
       (use-package powerline
         :ensure t
         :config
         (require 'powerline)
         (powerline-default-theme))
       ;; (use-package powerline-evil
       ;;   :ensure t
       ;;   :config (require 'powerline-evil)))
  #+END_SRC
** Evil Initial State
#+BEGIN_SRC emacs-lisp
(evil-set-initial-state 'dired-mode 'emacs)
(evil-set-initial-state 'magit-mode 'emacs)
(evil-set-initial-state 'kubernetes-mode 'emacs)
(evil-set-initial-state 'info-mode 'emacs)
#+END_SRC
** Evil Collection
   #+BEGIN_SRC emacs-lisp
       (use-package evil-collection
     :after evil
     :ensure t
     :config
     (evil-collection-init))
   #+END_SRC
** Evil Powerline
   #+BEGIN_SRC emacs-lisp
   #+END_SRC
** Keymaps
=C-u= is bound to a scroll up command in Vim, in Emacs however it's
used for the prefix argument.  This feels pretty weird to me after
having bothered learning =C-u= as command for killing a whole line in
everything using the readline library.  I consider =M-u= as a good
replacement considering it's bound to the rather useless ~upcase-word~
command by default which I most definitely will not miss.

#+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "C-u") 'kill-whole-line)
(define-key global-map (kbd "M-u") 'universal-argument)
(define-key universal-argument-map (kbd "C-u") nil)
(define-key universal-argument-map (kbd "M-u") 'universal-argument-more)
(with-eval-after-load 'evil-maps
  (define-key evil-motion-state-map (kbd "C-u") 'evil-scroll-up))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'evil-maps
  (define-key evil-normal-state-map (kbd "-") 'evil-numbers/dec-at-pt)
  (define-key evil-normal-state-map (kbd "+") 'evil-numbers/inc-at-pt))
#+END_SRC
** Commentary
   #+BEGIN_SRC emacs-lisp
     (use-package evil-commentary
 :ensure t
 :config (evil-commentary-mode))
   #+END_SRC
** Matchit
   #+BEGIN_SRC emacs-lisp
     (use-package evil-matchit
 :ensure t
 :config
 (require 'evil-matchit)
 (global-evil-matchit-mode 1)
 )
   #+END_SRC
** Magit
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :bind ("C-c g" . magit-status))
     ;; (use-package evil-magit)
   #+END_SRC
** Numbers
   #+BEGIN_SRC emacs-lisp
     (use-package evil-numbers
 :ensure t
 :config
 (define-key evil-normal-state-map (kbd "-") 'evil-numbers/dec-at-pt)
 (define-key evil-normal-state-map (kbd "+") 'evil-numbers/inc-at-pt))
   #+END_SRC
** Surround
#+BEGIN_SRC emacs-lisp
(use-package evil-surround
  :ensure t
  :config
  (global-evil-surround-mode 1))
#+END_SRC
** Visualstar
#+BEGIN_SRC emacs-lisp
(use-package evil-visualstar
  :ensure t
  :config
  (global-evil-visualstar-mode))
#+END_SRC
** Evil Org Mode
   - https://github.com/Somelauw/evil-org-mode/blob/master/doc/keythemes.org
   #+BEGIN_SRC emacs-lisp
     ;;     (use-package evil-org
     ;;       :ensure t
     ;;       :after org
     ;;       :config
     ;;       (add-hook 'org-mode-hook 'evil-org-mode)
     ;;       (add-hook 'evil-org-mode-hook
     ;;                 (lambda ()
     ;;                   (evil-org-set-key-theme)))
     ;;       (require 'evil-org-agenda)
     ;;       (evil-org-agenda-set-keys)
     ;; (evil-org-set-key-theme '(textobjects insert navigation additional shift todo heading)))
   #+END_SRC
* Completion
** Company
   #+BEGIN_SRC emacs-lisp
     (use-package company
 :ensure t
 :bind (:map company-active-map
		   ("C-n" . company-select-next)
		   ("C-p" . company-select-previous)
		   ("C-d" . company-show-doc-buffer)
		   ("<tab>" . company-complete))

 :init
 (global-company-mode t)
 :config
 (add-hook 'after-init-hook 'global-company-mode)
 (setq company-idle-delay 0)
 (setq company-minimum-prefix-length 2)
 (setq company-show-numbers t
	     company-tooltip-align-annotations t)
 )
   #+END_SRC
*** TODO auto show docs
** Swiper / Counsel / Ivy
*** Counsel
   #+BEGIN_SRC emacs-lisp
     (use-package counsel
 :ensure t
 :config
 (counsel-mode t)
 (global-set-key (kbd "C-c C-r") 'ivy-resume))
     ;; (use-package counsel
     ;; :ensure t
     ;;     :bind (("C-x C-f" . counsel-find-file)
     ;; 	   ("M-x" . counsel-M-x)
     ;; 	   ("C-h f" . counsel-describe-function)
     ;; 	   ("C-h v" . counsel-describe-variable)
     ;; 	   ("M-i" . counsel-imenu)
     ;; 	   ("C-c i" . counsel-unicode-char)
     ;; 	   :map read-expression-map
     ;; 	   ("C-r" . counsel-expression-history)))
 #+END_SRC

*** Swiper
    #+BEGIN_SRC emacs-lisp
     
   (use-package swiper
     :bind (("C-s" . swiper)
	    ("C-r" . swiper)
	    ("C-c C-r" . ivy-resume)
	    :map ivy-minibuffer-map
	    ("C-SPC" . ivy-restrict-to-matches))
     :init
     (ivy-mode 1)
     :config )
    #+END_SRC
** IDO
   #+BEGIN_SRC emacs-lisp
     ;; (require 'ido)
     ;; (ido-mode t)
     ;; (setq ido-enable-flex-matching t
     ;;       ido-everywhere t)
   #+END_SRC
* Projectile
  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :config
      (projectile-mode +1)
      (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
      (setq projectile-project-search-path '("~/Dropbox/org" "~/code/"))
      (setq projectile-completion-system 'ivy)
      (setq projectile-switch-project-action #'projectile-dired)

      )
  #+END_SRC

  #+RESULTS:
  : t

* Hydra and Unbindings
** Use Hydra
   #+BEGIN_SRC emacs-lisp
   (use-package hydra)
   #+END_SRC
** Window
*** TODO Hydra
    #+BEGIN_SRC emacs-lisp
        (defhydra hydra-window ()
            "Window"
        ("k" evil-window-increase-height "h+")
        ("j" evil-window-decrease-height "h-")
        ("l" evil-window-increase-width "w+")
        ("h" evil-window-decrease-width "w-")
        ("=" balance-windows "balance"))
           (bind-keys ("C-x w" . hydra-window/body))
    #+END_SRC

    #+RESULTS:
    : hydra-window/body

*** Unbindings
    #+BEGIN_SRC emacs-lisp
    (global-unset-key (kbd "C-x 0")) ;; delete-window
    (global-unset-key (kbd "C-x 1")) ;; delete-other-window
    (global-unset-key (kbd "C-x 2")) ;; split-window-below
    (global-unset-key (kbd "C-x 3")) ;; split-window-right
    (global-unset-key (kbd "C-x 5")) ;; +ctl-x-5-prefix ; operate on other frames
    (global-unset-key (kbd "C-x +")) ;; balance-windows
    (global-unset-key (kbd "C-x ^")) ;; enlarge-window
    (global-unset-key (kbd "C-x {")) ;; shrink-window-horizontally
    (global-unset-key (kbd "C-x }")) ;; enlarge-window-horizontally
    #+END_SRC

    #+RESULTS:

** Zoom
*** Hydra
  #+BEGIN_SRC emacs-lisp
      (defhydra hydra-zoom ()
        "zoom"
        ("=" text-scale-increase "in")
        ("-" text-scale-decrease "out")
        ("0" (text-scale-adjust 0) "reset")
        ("q" nil "quit" :color blue))
      (bind-keys ("C-x C-=" . hydra-zoom/body))
    #+END_SRC

    #+RESULTS:
    : hydra-zoom/body

*** Unbind
    #+BEGIN_SRC emacs-lisp
    (global-unset-key (kbd "C-x C-0")) ;; reset
    (global-unset-key (kbd "C-x C-+")) ;; text-scale-increase
    (global-unset-key (kbd "C-x C--")) ;; text-scale-decrease
    #+END_SRC

    #+RESULTS:
** Apropos
*** Unbindings
    #+BEGIN_SRC emacs-lisp
    (global-unset-key (kbd "C-h a")) ;; apropos-command
    (global-unset-key (kbd "C-h d")) ;; apropos-documentation
    #+END_SRC

    #+RESULTS:
*** Hydra
    #+BEGIN_SRC emacs-lisp
    (defhydra hydra-apropos (:color blue)
    "Apropos"
    ("a" apropos "apropos")
    ("c" apropos-command "cmd")
    ("d" apropos-documentation "doc")
    ("e" apropos-value "val")
    ("l" apropos-library "lib")
    ("o" apropos-user-option "option")
    ("v" apropos-variable "var")
    ("i" info-apropos "info")
    ("t" tags-apropos "tags")
    ("z" hydra-customize-apropos/body "customize"))

  (defhydra hydra-customize-apropos (:color blue)
    "Apropos (customize)"
    ("a" customize-apropos "apropos")
    ("f" customize-apropos-faces "faces")
    ("g" customize-apropos-groups "groups")
    ("o" customize-apropos-options "options"))

  (bind-keys ("C-h a" . hydra-apropos/body))
    #+END_SRC
** Describe
*** Hydra
    #+BEGIN_SRC emacs-lisp
      (defhydra hydra-describe (:color blue)
        "Helpful"
        ("f" helpful-callable "call")
        ("v" helpful-variable "var")
        ("k" helpful-key "key")
        ("p" helpful-at-point "at-point")
        ("F" helpful-function "func")
        ("c" helpful-command "command")
        ("P" describe-package "package")
        ("m" describe-mode "mode")
        ("b" describe-binding "bind")
        ("s" describe-syntax "syntax")
        ("o" describe-symbol "symbol")
      )
      (bind-keys ("C-h d" . hydra-describe/body))
    #+END_SRC

    #+RESULTS:
    : hydra-describe/body

*** Unbindings
    #+BEGIN_SRC emacs-lisp
      (global-unset-key (kbd "C-h f")) ;; describe-function
      (global-unset-key (kbd "C-h v")) ;; describe-variable
      (global-unset-key (kbd "C-h k")) ;; describe-key
      (global-unset-key (kbd "C-h C")) ;; describe-coding-system
      (global-unset-key (kbd "C-h P")) ;; describe-package
      (global-unset-key (kbd "C-h c")) ;; describe-key-briefly
      (global-unset-key (kbd "C-h g")) ;; describe-gnu-project
      (global-unset-key (kbd "C-h C-w")) ;; describe-no-warranty
      (global-unset-key (kbd "C-h C-o")) ;; describe-distribution
      (global-unset-key (kbd "C-h C-c")) ;; describe-copying
      (global-unset-key (kbd "C-h C-\\")) ;; describe-input-method
      (global-unset-key (kbd "C-h I")) ;; describe-input-method
      (global-unset-key (kbd "C-h L")) ;; describe-language-environment
      (global-unset-key (kbd "C-h o")) ;; describe-symbol
      (global-unset-key (kbd "C-h b")) ;; describe-binding
      (global-unset-key (kbd "C-h s")) ;; describe-syntax
      (global-unset-key (kbd "C-h m")) ;; describe-mode
    #+END_SRC

    #+RESULTS:

    #+BEGIN_SRC emacs-lisp
      (global-unset-key (kbd "C-h C-d")) ;; view-emacs-debugging
      (global-unset-key (kbd "C-h F")) ;; Info-goto-emacs-key-command
    #+END_SRC
** Helpful
   #+BEGIN_SRC emacs-lisp
 (defhydra hydra-helpful (:color blue)
   "Helpful"
   ("f" helpful-callable "call")
   ("v" helpful-variable "var")
   ("k" helpful-key "key")
   ("p" helpful-at-point "point")
   ("F" helpful-function "func")
   ("c" helpful-command "command")
 )
 (bind-keys ("C-h h" . hydra-helpful/body))
  
   #+END_SRC
** View
*** Unbind
    #+BEGIN_SRC emacs-lisp
     (global-unset-key (kbd "C-h e")) ;; view-echo-area-messages
     (global-unset-key (kbd "C-h l")) ;; view-echo-area-messages
     (global-unset-key (kbd "C-h n")) ;; view-emacs-news
     (global-unset-key (kbd "C-h C-n")) ;; view-emacs-news
     (global-unset-key (kbd "C-h C-e")) ;; view-external-packages
     (global-unset-key (kbd "C-h C-p")) ;; view-emacs-problems
     (global-unset-key (kbd "C-h C-t")) ;; view-emacs-todo
     (global-unset-key (kbd "C-h C-f")) ;; view-emacs-FAQ
    #+END_SRC

    #+RESULTS:

*** Hydra
    #+BEGIN_SRC emacs-lisp
      (defhydra hydra-view (:color blue)
        "View"
        ("e" helpful-callable "echo")
        ("l" helpful-variable "lossage")
        ("n" helpful-key "news")
        ("p" helpful-at-point "problems")
        ("f" helpful-function "todo")
        ("x" helpful-command "external packages")
      )
      (bind-keys ("C-h v" . hydra-view/body))
    #+END_SRC

    #+RESULTS:
    : hydra-view/body
** Transpose
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c t")
                     (defhydra hydra-transpose (:color red)
                       "Transpose"
                       ("c" transpose-chars "characters")
                       ("w" transpose-words "words")
                       ("o" org-transpose-words "Org mode words")
                       ("l" transpose-lines "lines")
                       ("s" transpose-sentences "sentences")
                       ("e" org-transpose-elements "Org mode elements")
                       ("p" transpose-paragraphs "paragraphs")
                       ("t" org-table-transpose-table-at-point "Org mode table")
                       ("q" nil "cancel" :color blue)))
   #+END_SRC

   #+RESULTS:
   : hydra-transpose/body
** TODO HideShow
   #+BEGIN_SRC emacs-lisp
     (defhydra hydra-hs (:idle 1.0)
       "
     Hide^^            ^Show^            ^Toggle^    ^Navigation^
     ----------------------------------------------------------------
     _h_ hide all      _s_ show all      _t_oggle    _n_ext line
     _d_ hide block    _a_ show block              _p_revious line
     _l_ hide level

     _SPC_ cancel
     "
       ("s" hs-show-all)
       ("h" hs-hide-all)
       ("a" hs-show-block)
       ("d" hs-hide-block)
       ("t" hs-toggle-hiding)
       ("l" hs-hide-level)
       ("n" forward-line)
       ("p" (forward-line -1))
       ("SPC" nil)
       )

     ;; (global-set-key (kbd "C-c @") 'hydra-hs/body)
      (bind-keys ("C-c @" . hydra-hs/body))
   #+END_SRC

   #+RESULTS:
   : hydra-hs/body

* Server
  #+BEGIN_SRC emacs-lisp
  (server-start)
  #+END_SRC
* Helpful
  #+BEGIN_SRC emacs-lisp
    (use-package helpful)
  #+END_SRC
* Which Key
   Brings up some help
   #+BEGIN_SRC emacs-lisp
   (use-package which-key
	 :ensure t 
	 :config
	 (which-key-mode))
   #+END_SRC
* Try
#+BEGIN_SRC emacs-lisp
  (use-package try)
#+END_SRC
* Path
  #+BEGIN_SRC emacs-lisp
    (use-package exec-path-from-shell
      :config (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))
  #+END_SRC
* Javascript
** js2-mode
   Mainly used for syntax parsing, a dependency for other packages
   #+BEGIN_SRC emacs-lisp
     (use-package js2-mode
 :ensure t
 :config
 (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
 (add-to-list 'interpreter-mode-alist '("node" . js2-mode))
 ;; (add-to-list 'auto-mode-alist '("\\.jsx?\\'" . js2-jsx-mode)) ; jsx support
 )
   #+END_SRC
** js2-refactor
   https://github.com/magnars/js2-refactor.el
   #+BEGIN_SRC emacs-lisp
     (use-package js2-refactor
 :ensure t
 :config
 (add-hook 'js2-mode-hook #'js2-refactor-mode)
 (setq js2-skip-preprocessor-directives t)
 (js2r-add-keybindings-with-prefix "C-c C-j")
 )
   #+END_SRC
** Tern
 #   #+BEGIN_SRC emacs-lisp
 #     (use-package tern
 # :ensure t)

 #     (use-package company-tern
 # :ensure t
 # :config
 # (add-to-list 'company-backends 'company-tern)
 # (add-hook 'js2-mode-hook (lambda ()
 #  			(tern-mode)
 #  			(company-mode))))
 #   #+END_SRC


** Indium
   #+BEGIN_SRC emacs-lisp
     ;;     (use-package tern
     ;; :ensure t
     ;; :config
     ;; (autoload 'tern-mode "tern.el" nil t)
     ;; (add-hook 'js-mode-hook (lambda () (tern-mode t))))
   #+END_SRC
* Flycheck
  #+BEGIN_SRC emacs-lisp
  (use-package flycheck
:config (global-flycheck-mode))
  #+END_SRC
* Go
  #+BEGIN_SRC emacs-lisp
  (use-package go-mode)
  #+END_SRC
* YAML
  #+BEGIN_SRC emacs-lisp
      (use-package yaml-mode
    :config
       (add-to-list 'auto-mode-alist '("\\.yaml\\'" . yaml-mode)))

    ;; Unlike python-mode, this mode follows the Emacs convention of not
    ;; binding the ENTER key to `newline-and-indent'.  To get this
    ;; behavior, add the key definition to `yaml-mode-hook':

    ;;    (add-hook 'yaml-mode-hook
    ;;     '(lambda ()
    ;;        (define-key yaml-mode-map "\C-m" 'newline-and-indent)))
  #+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package highlight-indentation
    :config
    (set-face-background 'highlight-indentation-face "#e3e3d3")
  (set-face-background 'highlight-indentation-current-column-face "#c3b3b3"))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(defun aj-toggle-fold ()
  "Toggle fold all lines larger than indentation on current line"
  (interactive)
  (let ((col 1))
    (save-excursion
      (back-to-indentation)
      (setq col (+ 1 (current-column)))
      (set-selective-display
       (if selective-display nil (or col 1))))))
(global-set-key [(M C i)] 'aj-toggle-fold)
#+END_SRC

* Expand Region
  #+BEGIN_SRC emacs-lisp
    (use-package expand-region
      :ensure t
      :config (global-set-key (kbd "C-=") 'er/expand-region))
  #+END_SRC
* Neotree
   #+BEGIN_SRC emacs-lisp
     (use-package neotree
       :ensure t
       :config (global-set-key [f8] 'neotree-toggle)
    (setq neo-smart-open t)
    (setq neo-theme (if (display-graphic-p) 'icons 'arrow 'ascii 'nerd))
    (evil-define-key 'normal neotree-mode-map (kbd "TAB") 'neotree-enter)
    (evil-define-key 'normal neotree-mode-map (kbd "SPC") 'neotree-quick-look)
    (evil-define-key 'normal neotree-mode-map (kbd "q") 'neotree-hide)
    (evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-enter)
    (evil-define-key 'normal neotree-mode-map (kbd "r") 'neotree-refresh)
    (evil-define-key 'normal neotree-mode-map (kbd "A") 'neotree-stretch-toggle)
    (evil-define-key 'normal neotree-mode-map (kbd "H") 'neotree-hidden-file-toggle)
)

   #+END_SRC
* Backups
  [[https://ogbe.net/emacsconfig.html][This tweak saves autosave files in one location, rather than in the same directory as the file that is being edited.]]

  #+BEGIN_SRC emacs-lisp
    (defvar backup-dir (expand-file-name "~/.emacs.d/backup/"))
    (defvar autosave-dir (expand-file-name "~/.emacs.d/autosave/"))
    (setq backup-directory-alist (list (cons ".*" backup-dir))
	  auto-save-list-file-prefix autosave-dir
	  auto-save-file-name-transforms `((".*" ,autosave-dir t))
	  tramp-backup-directory-alist backup-directory-alist
	  tramp-auto-save-directory autosave-dir)
  #+END_SRC
  #+BEGIN_SRC emacs-lisp
  (global-undo-tree-mode)
(setq undo-tree-auto-save-history t)
(setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
(undo-tree-load-history-hook)
  #+END_SRC

  #+RESULTS:

* Smartparens
  #+BEGIN_SRC emacs-lisp
    (use-package smartparens
      :ensure t
      :config (require 'smartparens-config)
      (add-hook 'js-mode-hook #'smartparens-mode))

  #+END_SRC
* Autopair
  #+BEGIN_SRC emacs-lisp
    (use-package autopair
      :ensure t
      :config (autopair-global-mode))
  #+END_SRC
* YASnippets
  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :ensure t
      :config (yas-global-mode 1))
  #+END_SRC
  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet-snippets
      :ensure t
      :config )
  #+END_SRC
* Discover
** Discover.el
#+BEGIN_SRC emacs-lisp
    (use-package discover
      :ensure t
      :config )
#+END_SRC

** Discover Major
#+BEGIN_SRC emacs-lisp
  (use-package discover-my-major
    :ensure t
    :config
    (global-set-key (kbd "C-h C-m") 'discover-my-major)
    (global-set-key (kbd "C-h M-m") 'discover-my-mode))
#+END_SRC
* Window
  #+BEGIN_SRC emacs-lisp
  #+END_SRC
* Server
#+BEGIN_SRC emacs-lisp
;;(server-start)
#+END_SRC
* DevOps
** Docker
   #+BEGIN_SRC emacs-lisp
   (use-package docker
   :ensure t
   :bind ("C-c d" . docker))
   #+END_SRC
** Kubernetes
   #+BEGIN_SRC emacs-lisp
       (use-package kubernetes
       :bind ("C-c k" . kubernetes-overview)
     :commands (kubernetes-overview))

   #+END_SRC

     ;; If you want to pull in the Evil compatibility package.
     ;; (use-package kubernetes-evil
     ;;   :after kubernetes)

   #+RESULTS:

** Terraform
   #+BEGIN_SRC emacs-lisp
   (use-package terraform-mode
   :ensure t
   :config )
   #+END_SRC
