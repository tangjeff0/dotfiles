" tangsauce vimrc
" Notes
  " :scriptnames
  " Practical Vim
  " https://github.com/kana/vim-textobj-entire
  " <c-k>{char1}{char2} digraph
  " :'<,'>norm.
  " :set path
  " @:
  " c_CTRL-R_CTRL-W
  " :!mkdir -p %:h
  " '^ last insertion
  " '[ start of last change or yank
  " :changes
    " jump list g; g,
  " yanks
    " "_ black hole register
    " "0 (intentional) yank register
  " searches
    " \m magic: default. diff rules for (, {, [. special meaning for . * ?
    " \v very no magic: special meaning to every char except _, numbers, letters
    " \V verbatim switch
    " register \1, \2?
  " escape ? and \ everytime:
    " store search: http://vimdoc.net/search?q=/\\
    " expression search: /\V<ctrl-r_=>escape(@a, getcmdtype().'\')
      " the . appends text in vimscript
    " result: \Vhttp:\/\/vimdoc.net\/search?q=\/\\\\
  " search
    " repeat last search, moving cursor to end of match//e
    " gn workhorse - improved dot formula
    " 86: count matches with
      " :%s///gn
      " :vimgrep //g %
    " 88 substitute
      " flags: c confirm, & use last flags
    " 92 replace w contents of regi
      " pass by value: <ctrl-r>0
      " pass by ref: /\=@0/
        " in the case that reg is too long or has & or ~
    " 99
      " delete matching lines :g/re/d
      " keep only matching lines :v/re/d
    " 100
      " capture all todos :g/TODO/yank A
    " 104
      " :tjump and g-<ctrl-]> to get to the jump list
    " 106 quickfix
      " :make :grep :vimgrep
      " :lmake :lgrep :lvimgrep
      " location list vs quicklist - QL is global, location is window-bound
    " 107 use older quickfix lists. TODO: :make doenst work with plugins on
  " Ch 19: Autocompletion
    " 113: <c-p><c-n> to do live filtering
    " 116: chain <c-x><c-l> add entire lines
    " 117: chain <c-x><c-p> to keep on adding words
    " 123: <C-x>s spell autocompletion
" Bootstrap
  if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
      \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
  endif
" vim-plug
  call plug#begin()
  " Plug 'othree/yaus.vim'
  " Plug 'tpope/projectionist'
  " Plug 'unblevable/quick-scope'
  " Plug 'xolox/vim-easytags'
  Plug 'SirVer/ultisnips'
  Plug 'Xuyuanp/nerdtree-git-plugin'
  Plug 'Yggdroot/indentLine'
  Plug 'airblade/vim-gitgutter'
  Plug 'benjifisher/matchit.zip'
  Plug 'dkarter/bullets.vim'
  Plug 'easymotion/vim-easymotion'
  Plug 'ervandew/supertab'
  Plug 'godlygeek/csapprox'
  Plug 'honza/vim-snippets'
  Plug 'itchyny/lightline.vim'
  Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
  Plug 'junegunn/fzf.vim'
  Plug 'junegunn/goyo.vim'
  Plug 'junegunn/limelight.vim'
  Plug 'junegunn/seoul256.vim'
  Plug 'majutsushi/tagbar'
  Plug 'marciomazza/vim-brogrammer-theme'
  Plug 'mattn/emmet-vim'
  Plug 'mbbill/undotree'
  Plug 'mileszs/ack.vim'
  Plug 'mxw/vim-jsx'
  Plug 'pangloss/vim-javascript'
  Plug 'python-mode/python-mode'
  Plug 'reedes/vim-pencil'
  Plug 'rizzatti/dash.vim'
  Plug 'scrooloose/nerdtree'
  Plug 'suan/vim-instant-markdown'
  Plug 'tangsauce/tmux-resize.vim'
  Plug 'tpope/vim-abolish'
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-unimpaired'
  Plug 'tpope/vim-vinegar'
  Plug 'valloric/matchtagalways'
  Plug 'w0rp/ale'
  Plug 'xolox/vim-misc'
  Plug 'xolox/vim-notes'
  Plug 'jlanzarotta/bufexplorer'
  call plug#end()
" Vanilla Vim
  set nocompatible
  colo seoul256
  set directory=~/.vim/swap
  " set mouse=v
  " set clipboard=unnamedplus
  set undofile undodir=~/.vim/undodir
  set tabstop=2 shiftwidth=2
  set softtabstop=2 expandtab
  set autoindent smartindent
  set wrap
  set backspace=indent,eol,start
  set showmatch
  set showcmd
  set number relativenumber
  set colorcolumn=80
  set scrolloff=10
  set timeout timeoutlen=3000 ttimeoutlen=100
  set laststatus=2
  set showmode
  set mousehide
  set wildmenu
  set textwidth=0
  set hlsearch
  set incsearch
  set autoread
  set t_Co=256
  set list listchars=trail:Â·,tab:>-
  set infercase
  " set viewoptions-=options
  set encoding=utf-8
  set fileencoding=utf-8
  set noequalalways
  set nojoinspaces
  set shiftround
  set fillchars+=fold:Â·
  set foldmethod=manual
" Mappings
  " fn keys
    set pastetoggle=<F1>
    nnoremap <F2> :CtrlPClearCache<CR>
    nnoremap <F2> :UndotreeToggle<CR>
    nnoremap <F4> :TagbarToggle<CR>
  " Remap
    nnoremap <S-y> y$
    nnoremap & :&&<CR>
    xnoremap & :&&<CR>
    cnoremap <expr> %%  getcmdtype() == ':' ? expand('%:h').'/' : '%%'
    xnoremap * :<C-u>call <SID>VSetSearch('/')<CR>/<C-R>=@/<CR><CR>
    xnoremap # :<C-u>call <SID>VSetSearch('?')<CR>?<C-R>=@/<CR><CR>
  " Commands
    command! PI source ~/.vim/vimrc | PlugInstall
    command! PC source ~/.vim/vimrc | PlugClean
    command! Revise setlocal number! relativenumber! spell!
    command! H :Helptags
  " Leader
    let mapleader= " "
    noremap <leader>c "+y
    nnoremap <leader>r :source ~/.vim/vimrc<CR>
    nnoremap <leader>bb :Buffers<CR>
    nnoremap <leader>G :Goyo<CR>
    " nnoremap <leader>d "_d
    " TODO: write if statement to toggle color
    nnoremap <leader>l :set background=light<CR>
    nnoremap <leader>d :set background=dark<CR>
    nnoremap <c-p> :Files<CR>
    " nnoremap <leader>2 :set tabstop=2 shiftwidth=2<CR>
    " nnoremap <leader>4 :set tabstop=4 shiftwidth=4<CR>
    " nnoremap <silent>t :TagbarToggle<CR>
    " map <leader>m :vert term ../bin/matlab -nodesktop -nosplash<CR>
    " map <leader>q <C-w>:quit!
    " imap cll console.log()<Esc>$F(a
    " vmap cll yocll<Esc>p
    " nmap cll yiwocll<Esc>p
" Autogroups
  augroup config
    autocmd!
    autocmd FileType javascript setlocal commentstring=/*\ %s\ */
    autocmd FileType python setlocal tabstop=4 shiftwidth=4
    " autocmd BufWinEnter *? loadview | normal! zM
    " autocmd BufWinLeave *? mkview
    autocmd BufWinEnter *? normal! zM
    autocmd BufEnter,InsertLeave *? set relativenumber
    autocmd BufLeave,InsertEnter *? set norelativenumber
    autocmd FileType markdown setlocal nospell
    autocmd BufLeave,InsertEnter *.txt,*.md set nonumber norelativenumber
    autocmd BufEnter,InsertLeave *.txt,*.md set nonumber norelativenumber
    autocmd BufEnter vimrc,.zshrc,.tmux.conf setlocal foldmethod=expr foldexpr=GetPotionFold(v:lnum) foldtext=Foldtext()
  augroup end
  autocmd User GoyoEnter Limelight
  autocmd User GoyoLeave Limelight!
" Functions
  function! s:VSetSearch(cmdtype)
    let temp = @s
    norm! gv"sy
    let @/ = '\V' . substitute(escape(@s, a:cmdtype.'\'), '\n', '\\n', 'g')
    let @s = temp
  endfunction
  function! FilenameForLightline()
      return expand('%')
  endfunction
  " Custom Folding Function
    " http://learnvimscriptthehardway.stevelosh.com/chapters/49.html
    function! IndentLevel(lnum)
        return indent(a:lnum) / &shiftwidth
    endfunction
    function! NextNonBlankLine(lnum)
        let numlines = line('$')
        let current = a:lnum + 1
        while current <= numlines
            if getline(current) =~? '\v\S'
                return current
            endif
            let current += 1
        endwhile
        return -2
    endfunction
    function! GetPotionFold(lnum)
        if getline(a:lnum) =~? '\v^\s*$'
            return '-1'
        endif
        let this_indent = IndentLevel(a:lnum)
        let next_indent = IndentLevel(NextNonBlankLine(a:lnum))
        if next_indent == this_indent
            return this_indent
        elseif next_indent < this_indent
            return this_indent
        elseif next_indent > this_indent
            return '>' . next_indent
        endif
    endfunction
  " Fold Styling
    " https://github.com/wincent/wincent/blob/fe798113ffb7c616cb7c332c91eaffd62e781048/roles/dotfiles/files/.vim/autoload/wincent/settings.vim#L7-L20
      function! Foldtext() abort
        let s:middot='Â·'
        let s:raquo='Â»'
        let s:small_l='â„“'
        let l:lines='[' . (v:foldend - v:foldstart + 1) . s:small_l . ']'
        let l:first=substitute(getline(v:foldstart), '\v *', '', '')
        let l:dashes=substitute(v:folddashes, '-', s:middot, 'g')
        return s:raquo . s:middot . s:middot . l:lines . l:dashes . ': ' . l:first
      endfunction
" Plugin options
  " Lightline
    let g:lightline = {
          \ 'active': {
          \   'left': [ [ 'mode', 'paste' ],
          \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
          \ },
          \ 'component_function': {
          \   'gitbranch': 'fugitive#head',
          \   'filename': 'FilenameForLightline'
          \ },
          \ }
    let g:lightline.colorscheme = 'solarized'
  " NerdTree
    nnoremap <C-n> :NERDTreeToggle<CR>
    let g:NERDTreeWinPos = "left"
    let g:NERDTreeMapOpenSplit = "s"
    let g:NERDTreeMapOpenVSplit = "v"
    let g:NERDTreeCreatePrefix = "silent keepalt keepjumps"
    let g:NERDTreeShowHidden=1
  " ALE
    let g:ale_linters = {
    \ 'javascript': ['eslint'],
    \ }
    " nmap <silent> <C-k> <Plug>(ale_previous_wrap)
    " nmap <silent> <C-j> <Plug>(ale_next_wrap)
  " TmuxResize
    nnoremap <Left> :call TmuxResize('h', 5)<CR>
    nnoremap <Up> :call TmuxResize('k', 5)<CR>
    nnoremap <Down> :call TmuxResize('j', 5)<CR>
    nnoremap <Right> :call TmuxResize('l', 5)<CR>
  " UltiSnips
    let g:UltiSnipsExpandTrigger="<tab>"
    let g:UltiSnipsListSnippets="<c-l>"
    let g:UltiSnipsJumpForwardTrigger="<c-j>"
    let g:UltiSnipsJumpBackwardTrigger="<c-k>"
    let g:UltiSnipsEditSplit='vertical'
    let g:UltiSnipsSnippetDirectories=[$HOME.'/.vim/UltiSnips', $HOME.'/.vim/bundle/vim-snippets/UltiSnips']
    let g:ultisnips_javascript = {
    \ 'keyword-spacing': 'always',
    \ 'semi': 'never',
    \ }
    let g:snips_author = 'Jeff Tang'
  " MatchTagAlways
    let g:mta_filetypes = {
    \ 'javascript.jsx' : 1,
    \}
  " Ack
    let g:ackprg = "ag --vimgrep"
  " FZF
    let g:fzf_colors =
    \ { 'fg':      ['fg', 'Normal'],
      \ 'bg':      ['bg', 'Normal'],
      \ 'hl':      ['fg', 'Comment'],
      \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
      \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
      \ 'hl+':     ['fg', 'Statement'],
      \ 'info':    ['fg', 'PreProc'],
      \ 'border':  ['fg', 'Ignore'],
      \ 'prompt':  ['fg', 'Conditional'],
      \ 'pointer': ['fg', 'Exception'],
      \ 'marker':  ['fg', 'Keyword'],
      \ 'spinner': ['fg', 'Label'],
      \ 'header':  ['fg', 'Comment'] }
