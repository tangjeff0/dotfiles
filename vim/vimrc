" Notes {{{1
" :scriptnames
" cmdwin q/ q? q: or CTRL_F
" Practical Vim
" https://github.com/kana/vim-textobj-entire
" cat /dev/urandom
" smile
" <c-k>{char1}{char2} digraph
" :'<,'>norm.
" :set path
" @:
" c_CTRL-R_CTRL-W
" :read !cat filename.txt
" :!mkdir -p %:h
" :w !sudo tee % > /dev/null
" '. last change
" '^ last insertion
" '[ start of last change or yank
" :changes
  " g; g,
" yanks
  " "_ black hole register
  " "0 (intentional) yank register
" searches
  " \m magic: default. diff rules for (, {, [. special meaning for . * ?
  " \v very no magic: special meaning to every char except _, numbers, letters
  " \V verbatim switch
  " register \1, \2?
" escape ? and \ everytime:
  " store search: http://vimdoc.net/search?q=/\\
  " expression search: /\V<ctrl-r_=>escape(@a, getcmdtype().'\')
    " the . appends text in vimscript
  " result: \Vhttp:\/\/vimdoc.net\/search?q=\/\\\\
" search
  " repeat last search, moving cursor to end of match//e
  " gn workhorse - improved dot formula
  " 86: count matches with
    " :%s///gn
    " :vimgrep //g %
  " 88 substitute
    " flags: c confirm, & use last flags
  " 92 replace w contents of regi
    " pass by value: <ctrl-r>0
    " pass by ref: /\=@0/
      " in the case that reg is too long or has & or ~
  " 99
    " delete matching lines :g/re/d
    " keep only matching lines :v/re/d
  " 100
    " capture all todos :g/TODO/yank A
  " 104
    " :tjump and g-<ctrl-]> to get to the jump list
  " 106 quickfix
    " :make :grep :vimgrep
    " :lmake :lgrep :lvimgrep
    " location list vs quicklist - QL is global, location is window-bound
  " 107 use older quickfix lists. TODO: :make doenst work with plugins on
" Ch 19: Autocompletion
  " 113: <c-p><c-n> to do live filtering
  " 116: chain <c-x><c-l> add entire lines
  " 117: chain <c-x><c-p> to keep on adding words
  " 123: <C-x>s spell autocompletion

" Vundle {{{1
set rtp+=~/.vim/bundle/Vundle.vim
set nocompatible
filetype off
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'tpope/vim-vinegar'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-unimpaired'
Plugin 'tpope/vim-abolish'
" Plugin 'tpope/projectionist'
Plugin 'airblade/vim-gitgutter'
Plugin 'benjifisher/matchit.zip'
Plugin 'majutsushi/tagbar'
" Plugin 'xolox/vim-easytags'
Plugin 'xolox/vim-misc'
Plugin 'itchyny/lightline.vim'
Plugin 'Yggdroot/indentLine'
Plugin 'w0rp/ale'
Plugin 'mattn/emmet-vim'
Plugin 'pangloss/vim-javascript'
Plugin 'mxw/vim-jsx'
Plugin 'leafgarland/typescript-vim'
" Plugin 'othree/yaus.vim'
Plugin 'valloric/matchtagalways'
Plugin 'mbbill/undotree'
Plugin 'tangsauce/tmux-resize.vim'
Plugin 'reedes/vim-pencil'
Plugin 'suan/vim-instant-markdown'
Plugin 'junegunn/goyo.vim'
Plugin 'junegunn/limelight.vim'
Plugin 'ervandew/supertab'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'godlygeek/csapprox'
Plugin 'rizzatti/dash.vim'
Plugin 'junegunn/seoul256.vim'
Plugin 'marciomazza/vim-brogrammer-theme'
Plugin 'python-mode/python-mode'
Plugin 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plugin 'junegunn/fzf.vim'
Plugin 'mileszs/ack.vim'
Plugin 'xolox/vim-notes'
Plugin 'dkarter/bullets.vim'
Plugin 'unblevable/quick-scope'
Plugin 'easymotion/vim-easymotion'
call vundle#end()
filetype plugin indent on

" Vanilla Vim {{{1
syntax enable
set nocompatible
" set shellpipe=>
colo seoul256
set directory=~/.vim/swap
set undofile undodir=~/.vim/undo
set tabstop=2 shiftwidth=2
set softtabstop=2 expandtab
set autoindent smartindent
set wrap
set backspace=indent,eol,start
set showmatch
set showcmd
set number relativenumber
set colorcolumn=80
set scrolloff=10
set timeout timeoutlen=3000 ttimeoutlen=100
set laststatus=2
set showmode
set mousehide
set wildmenu
set textwidth=0
set hlsearch
set incsearch
set autoread
set t_Co=256
set list listchars=eol:â†©,trail:Â·,tab:>-
set infercase
" set viewoptions-=options
set foldmethod=marker
set encoding=utf-8
set fileencoding=utf-8
set noequalalways
set nojoinspaces
set shiftround

" Mappings {{{1
" FMap {{{2
set pastetoggle=<F1>
nnoremap <F2> :CtrlPClearCache<CR>
nnoremap <F2> :UndotreeToggle<CR>
nnoremap <F4> :TagbarToggle<CR>
" Remap {{{2
nnoremap <S-y> y$
nnoremap & :&&<CR>
xnoremap & :&&<CR>
cnoremap <expr> %%  getcmdtype() == ':' ? expand('%:h').'/' : '%%'
xnoremap * :<C-u>call <SID>VSetSearch('/')<CR>/<C-R>=@/<CR><CR>
xnoremap # :<C-u>call <SID>VSetSearch('?')<CR>?<C-R>=@/<CR><CR>
" Command {{{2
command! VI source ~/.vim/vimrc | VundleInstall
command! VC source ~/.vim/vimrc | VundleClean<
command! Revise setlocal number! relativenumber! spell!
" Leader {{{2
let mapleader= " "
noremap <leader>c "+y
nnoremap <leader>r :source ~/.vim/vimrc<CR>
nnoremap <leader>b :Buffers<CR>
nnoremap <leader>G :Goyo<CR>
nnoremap <leader>d "_d
nnoremap <c-p> :Files<CR>
" nnoremap <leader>2 :set tabstop=2 shiftwidth=2<CR>
" nnoremap <leader>4 :set tabstop=4 shiftwidth=4<CR>
" nnoremap <silent>t :TagbarToggle<CR>
" map <leader>m :vert term ../bin/matlab -nodesktop -nosplash<CR>
" map <leader>q <C-w>:quit!
" imap cll console.log()<Esc>$F(a
" vmap cll yocll<Esc>p
" nmap cll yiwocll<Esc>p

" Autogroups {{{1
augroup config
  autocmd!
  autocmd FileType javascript setlocal commentstring=/*\ %s\ */
  autocmd FileType python setlocal tabstop=4 shiftwidth=4
  " autocmd BufWinEnter *? loadview | normal! zM
  " autocmd BufWinLeave *? mkview
  autocmd BufWinEnter *? normal! zM
  autocmd BufEnter,InsertLeave *? set relativenumber
  autocmd BufLeave,InsertEnter *? set norelativenumber
  autocmd FileType markdown setlocal nospell
  autocmd BufLeave,InsertEnter *.txt,*.md set nonumber norelativenumber
  autocmd BufEnter,InsertLeave *.txt,*.md set nonumber norelativenumber
augroup end
autocmd User GoyoEnter Limelight
autocmd User GoyoLeave Limelight!

" autocmd BufRead,BufNewFile *.md 
" autocmd BufRead,BufNewFile *.md 
" nnoremap z= z=1<CR><CR>

" Functions {{{1
function! s:VSetSearch(cmdtype)
  let temp = @s
  norm! gv"sy
  let @/ = '\V' . substitute(escape(@s, a:cmdtype.'\'), '\n', '\\n', 'g')
  let @s = temp
endfunction
function! FilenameForLightline()
    return expand('%')
endfunction
" Plugin options {{{1
" Lightline {{{2
let g:lightline = {
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'fugitive#head',
      \   'filename': 'FilenameForLightline'
      \ },
      \ }
let g:lightline.colorscheme = 'solarized'
" NerdTree {{{2
" let g:netrw_liststyle=3
nnoremap <C-n> :NERDTreeToggle<CR>
let g:NERDTreeWinPos = "left"
let g:NERDTreeMapOpenSplit = "s"
let g:NERDTreeMapOpenVSplit = "v"
let g:NERDTreeCreatePrefix = "silent keepalt keepjumps"

" ALE {{{2
let g:ale_linters = {
\ 'javascript': ['eslint'],
\ }
" nmap <silent> <C-k> <Plug>(ale_previous_wrap)
" nmap <silent> <C-j> <Plug>(ale_next_wrap)

" TmuxResize {{{2
nnoremap <Left> :call TmuxResize('h', 5)<CR>
nnoremap <Up> :call TmuxResize('k', 5)<CR>
nnoremap <Down> :call TmuxResize('j', 5)<CR>
nnoremap <Right> :call TmuxResize('l', 5)<CR>

" UltiSnips {{{2
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsListSnippets="<c-l>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"
let g:UltiSnipsEditSplit='vertical'
let g:UltiSnipsSnippetDirectories=[$HOME.'/.vim/UltiSnips', $HOME.'/.vim/bundle/vim-snippets/UltiSnips']
let g:ultisnips_javascript = {
\ 'keyword-spacing': 'always',
\ 'semi': 'never',
\ }
let g:snips_author = 'Jeff Tang'

" MatchTagAlways {{{2
let g:mta_filetypes = {
\ 'javascript.jsx' : 1,
\}

" Ack {{{2
let g:ackprg = "ag --vimgrep --ignore-dir .git"

" FZF {{{2
" let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-h': 'split',
  \ 'ctrl-v': 'vsplit' }

let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" let g:pymode_lint = 0

" vim-notes {{{2
let g:notes_directories=['~/Dropbox/notes']
let g:notes_suffix='.md'
let g:notes_title_sync='rename_file'
" quick-scope {{{2
highlight QuickScopePrimary guifg='#afff5f' gui=underline ctermfg=155 cterm=underline
highlight QuickScopeSecondary guifg='#5fffff' gui=underline ctermfg=81 cterm=underline
