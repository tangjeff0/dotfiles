for some reason, if i `find-file` in my `init.el` on .org files, any org files that are not the last found file do not have org bullets

(org-mode-restart)

#+RESULTS:
: org-mode restarted
* GUI
** Theme
*** Seoul
    #+BEGIN_SRC emacs-lisp
      (use-package seoul256-theme
  :config (load-theme 'seoul256 t))
    #+END_SRC
*** Dracula
    #+BEGIN_SRC emacs-lisp
      (use-package dracula-theme
  :config (load-theme 'dracula t))
    #+END_SRC
** Word Wrap
#+BEGIN_SRC emacs-lisp
(global-visual-line-mode t)
#+END_SRC
** Font / Face
*** Size
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :height 180)
#+END_SRC
*** Icons
    #+BEGIN_SRC emacs-lisp
      (use-package all-the-icons)
    #+END_SRC
** Cursor
   Adaptive cursor width shows width of character, e.g. TAB. Via [[http://pragmaticemacs.com/emacs/adaptive-cursor-width/][Pragmatic Emacs]].
   #+BEGIN_SRC emacs-lisp
 (setq x-stretch-cursor t)
   #+END_SRC
** Tool Bar
   #+BEGIN_SRC emacs-lisp
   (if (fboundp 'menu-bar-mode) (menu-bar-mode 1))
   (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
   (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
   #+END_SRC
** Linenumbers
    #+BEGIN_SRC emacs-lisp
(global-display-line-numbers-mode)
(use-package linum-relative
:ensure t
:config
(require 'linum-relative)
(linum-relative-mode))
    #+END_SRC
** Prompts
 #+BEGIN_SRC emacs-lisp
   (fset 'yes-or-no-p 'y-or-n-p)
 #+END_SRC
** Parentheses
   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-delimiters
 :ensure t
 :config (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
   #+END_SRC
#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
  (setq show-paren-style 'expression)

#+END_SRC
** Beacon
   A light that follows your cursor around so you don't lose it!
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :config (beacon-mode 1))

#+END_SRC
** Indent
  make indentation commands use space only (never tab character)
#+BEGIN_SRC emacs-lisp
  (progn
    (setq-default indent-tabs-mode nil))
  (setq-default tab-width 2)
  (setq js-indent-level 2)
  (setq typescript-indent-level 2)

#+END_SRC
** Scroll Margin
   #+BEGIN_SRC emacs-lisp
     (setq scroll-margin 10)
   #+END_SRC
** Maximized
   #+BEGIN_SRC emacs-lisp
   (toggle-frame-maximized)
   #+END_SRC
* System
** Server
   #+BEGIN_SRC emacs-lisp
   (load "server")
   (unless (server-running-p) (server-start))
   #+END_SRC
** Path
   #+BEGIN_SRC emacs-lisp
     (use-package exec-path-from-shell
       :config (when (memq window-system '(mac ns x))
       (exec-path-from-shell-initialize)))
   #+END_SRC
** Backups
   [[https://ogbe.net/emacsconfig.html][This tweak saves autosave files in one location, rather than in the same directory as the file that is being edited.]]

   #+BEGIN_SRC emacs-lisp
     (defvar backup-dir (expand-file-name "~/.emacs.d/backup/"))
     (defvar autosave-dir (expand-file-name "~/.emacs.d/autosave/"))
     (setq backup-directory-alist (list (cons ".*" backup-dir))
	   auto-save-list-file-prefix autosave-dir
	   auto-save-file-name-transforms `((".*" ,autosave-dir t))
	   tramp-backup-directory-alist backup-directory-alist
	   tramp-auto-save-directory autosave-dir)
   #+END_SRC
   #+BEGIN_SRC emacs-lisp
;;   (global-undo-tree-mode)
;; (setq undo-tree-auto-save-history t)
;; (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
;; (undo-tree-load-history-hook)
   #+END_SRC

   #+RESULTS:
* Utilities
** Try
 #+BEGIN_SRC emacs-lisp
   (use-package try)
 #+END_SRC
** Which Key
    Brings up some help
    #+BEGIN_SRC emacs-lisp
    (use-package which-key
	  :ensure t
	  :config
	  (which-key-mode))
    #+END_SRC
** Async
  #+BEGIN_SRC emacs-lisp
    (use-package async
      :init
      (autoload 'dired-async-mode "dired-async.el" nil t)
      (dired-async-mode 1)
      (async-bytecomp-package-mode 1)
      (autoload 'dired-async-mode "dired-async.el" nil t)
      (async-bytecomp-package-mode 1)
      (dired-async-mode 1)
      (require 'smtpmail-async)
      (setq send-mail-function 'async-smtpmail-send-it))
  #+END_SRC
** Discover
*** Discover.el
 #+BEGIN_SRC emacs-lisp
     (use-package discover
       :ensure t
       :config )
 #+END_SRC
*** Discover Major
 #+BEGIN_SRC emacs-lisp
   (use-package discover-my-major
     :ensure t
     :config
     (global-set-key (kbd "C-h C-m") 'discover-my-major)
     (global-set-key (kbd "C-h M-m") 'discover-my-mode))
 #+END_SRC
** Helpful
   #+BEGIN_SRC emacs-lisp
     (use-package helpful)
   #+END_SRC
** Expand Region
   #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :config (global-set-key (kbd "C-=") 'er/expand-region))
   #+END_SRC
* Org Mode
** Install
   #+BEGIN_SRC emacs-lisp
;; (use-package org)

   #+END_SRC
** Settings
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/Dropbox/org")
(setq org-mobile-inbox-for-pull "~/Dropbox/org/flagged.org")
(setq org-mobile-directory "~/Dropbox/Apps/MobileOrg")
(setq org-startup-with-inline-images t)
#+END_SRC
#+BEGIN_SRC python
print("hi")
return 1
#+END_SRC

#+RESULTS:
: 1



** Narrow or Widden
  #+BEGIN_SRC emacs-lisp
    (defun narrow-or-widen-dwim (p)
      "If the buffer is narrowed, it widens. Otherwise, it narrows
    intelligently.  Intelligently means: region, org-src-block,
    org-subtree, or defun, whichever applies first.  Narrowing to
    org-src-block actually calls `org-edit-src-code'.

    With prefix P, don't widen, just narrow even if buffer is already
    narrowed."
      (interactive "P")
      (declare (interactive-only))
      (cond ((and (buffer-narrowed-p) (not p)) (widen))
      ((and (boundp 'org-src-mode) org-src-mode (not p))
       (org-edit-src-exit))
      ((region-active-p)
       (narrow-to-region (region-beginning) (region-end)))
      ((derived-mode-p 'org-mode)
       (cond ((ignore-errors (org-edit-src-code))
        (delete-other-windows))
       ((org-at-block-p)
        (org-narrow-to-block))
       (t (org-narrow-to-subtree))))
      ((derived-mode-p 'prog-mode) (narrow-to-defun))
      (t (error "Please select a region to narrow to"))))

    (eval-after-load 'org-src
      '(bind-key "C-x n s" 'org-edit-src-exit org-src-mode-map))
  #+END_SRC
** Structure Templates / Tempo
** Time
#+BEGIN_SRC emacs-lisp
(setq org-log-done 'time)
#+END_SRC
** Keybindings
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cb" 'org-switchb)
#+END_SRC
** Todo
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords
  '((sequence "TODO(t)" "|" "DONE(x)" "CANCELLED(c)")))
  (setq org-todo-keyword-faces
        '(("CANCELLED" . "yellow")))
#+END_SRC
** Bullets
#+BEGIN_SRC emacs-lisp
    (use-package org-bullets
    :config
    (require 'org-bullets)
    (custom-set-faces
      '(org-level-1 ((t (:inherit outline-1 :height 1.0))))
      '(org-level-2 ((t (:inherit outline-2 :height 1.0))))
      '(org-level-3 ((t (:inherit outline-3 :height 1.0))))
      '(org-level-4 ((t (:inherit outline-4 :height 1.0))))
      '(org-level-5 ((t (:inherit outline-5 :height 1.0))))
    )
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  (org-bullets-mode))
#+END_SRC
** Language
   #+BEGIN_SRC emacs-lisp
   ;; (require 'josh-chinese)
   #+END_SRC
** Capture
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
        '(("t" "Task" entry (file+headline "~/Dropbox/org/idx.org" "Tasks") "* TODO %i%?\n")
          ;; ("a" "Appointment" entry (file  "~/Dropbox/org/gcal.org" ) "* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n")
          ("r" "Review")
          ("rd" "Daily" entry (file+olp+datetree "~/Dropbox/org/review.org" "Daily") (file "~/Dropbox/org/templates/daily.org"))
          ("rw" "Weekly" entry (file+olp+datetree "~/Dropbox/org/review.org" "Weekly") (file "~/Dropbox/org/templates/Weekly.org"))
          ("rm" "Monthly" entry (file+olp+datetree "~/Dropbox/org/review.org" "Monthly") (file "~/Dropbox/org/templates/Monthly.org"))
          ("s" "Strata")
          ("sd" "Daily" entry (file+headline "~/Dropbox/org/strata.org" "Meetings") (file "~/Dropbox/org/templates/strata_daily.org"))
          ("sw" "Weekly" entry (file+headline "~/Dropbox/org/strata.org" "Meetings") (file "~/Dropbox/org/templates/strata_weekly.org"))
          ("sm" "Misc." entry (file+headline "~/Dropbox/org/strata.org" "Meetings") "* %u :misc: \n- %?")
          ("st" "Task" entry (file+headline "~/Dropbox/org/strata.org" "Tasks") "* TODO %i%?\n")
          ("l" "language")
          ("lc" "Chinese" entry (file+headline "~/Dropbox/org/language.org" "Chinese") (file "~/Dropbox/org/templates/chinese.org"))
          ))
#+END_SRC
** Agenda
*** Files
    #+BEGIN_SRC emacs-lisp
      (setq org-agenda-files (list "~/Dropbox/org/gcal.org"
				   "~/Dropbox/org/idx.org"))
    #+END_SRC
*** Config
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-inhibit-startup nil
	org-agenda-show-future-repeats nil
	org-agenda-start-on-weekday nil
	org-agenda-skip-deadline-if-done t
	org-agenda-skip-scheduled-if-done t)
#+END_SRC
*** Custom Commands
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-custom-commands
	'(("d" "Daily Review"
	   ((agenda "" ((org-agenda-span 1)))
	    (todo ""
	 ((org-agenda-overriding-header "Unscheduled TODOs")
		(org-agenda-skip-function '(org-agenda-skip-entry-if 'timestamp))))
	   ))))
#+END_SRC
** Archive
   #+BEGIN_SRC emacs-lisp
(setq org-archive-location "::* Archive")

   #+END_SRC
** Link
  =org-cliplink= lets you insert a link from your clipboard with a title that is fetched from the page's metadata.

  #+BEGIN_SRC emacs-lisp
    (use-package org-cliplink
      :bind ("C-x p i" . org-cliplink))
  #+END_SRC
** Download
#+BEGIN_SRC emacs-lisp
  (use-package org-download
    :config
    (add-hook 'dired-mode-hook 'org-download-enable)
    (setq org-download-timestamp t)
  )

#+END_SRC
** Export
   #+BEGIN_SRC emacs-lisp
        (setq org-export-coding-system 'utf-8)
     (use-package htmlize)
     ;; (use-package ox-reveal
     ;; :load-path "~/.emacs.d/org-reveal"
     ;;   :config
     ;; )
     (require 'ox-md)
     (require 'ox-latex)
     (require 'ox-man)

   #+END_SRC
*** Presentation
** org-babel-do-load-languages
   #+BEGIN_SRC emacs-lisp
  ;; active Babel languages
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
(js . t)
(shell . t)
(python . t)
))
   #+END_SRC
   
#+BEGIN_SRC bash
echo "hey land"

#+END_SRC

   #+RESULTS:
   : hey land
* Evil
** Use Evil
   #+BEGIN_SRC emacs-lisp
(use-package evil
    :init
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1))
   #+END_SRC
** Evil Powerline
   #+BEGIN_SRC emacs-lisp
        (use-package powerline
          :config
          (require 'powerline)
          (powerline-default-theme))
        ;; (use-package powerline-evil
        ;;   :config (require 'powerline-evil)))
   #+END_SRC
** Evil Initial State
#+BEGIN_SRC emacs-lisp
(evil-set-initial-state 'dired-mode 'emacs)
(evil-set-initial-state 'magit-mode 'emacs)
(evil-set-initial-state 'kubernetes-mode 'emacs)
(evil-set-initial-state 'info-mode 'emacs)
(evil-set-initial-state 'docker-container-mode 'emacs)
(evil-set-initial-state 'docker-image-mode 'emacs)
#+END_SRC
** Evil Collection
   #+BEGIN_SRC emacs-lisp
       (use-package evil-collection
     :after evil
     :config
     (evil-collection-init))
   #+END_SRC
** Keymaps
=C-u= is bound to a scroll up command in Vim, in Emacs however it's
used for the prefix argument.  This feels pretty weird to me after
having bothered learning =C-u= as command for killing a whole line in
everything using the readline library.  I consider =M-u= as a good
replacement considering it's bound to the rather useless ~upcase-word~
command by default which I most definitely will not miss.

;; HERE
#+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "C-u") 'kill-whole-line)
(define-key global-map (kbd "M-u") 'universal-argument)
(define-key universal-argument-map (kbd "C-u") nil)
(define-key universal-argument-map (kbd "M-u") 'universal-argument-more)
(with-eval-after-load 'evil-maps
  (define-key evil-motion-state-map (kbd "C-u") 'evil-scroll-up))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'evil-maps
  (define-key evil-normal-state-map (kbd "-") 'evil-numbers/dec-at-pt)
  (define-key evil-normal-state-map (kbd "+") 'evil-numbers/inc-at-pt))
#+END_SRC
** Commentary
   #+BEGIN_SRC emacs-lisp
     (use-package evil-commentary
 :config (evil-commentary-mode))
   #+END_SRC
** Matchit
   #+BEGIN_SRC emacs-lisp
     (use-package evil-matchit
 :config
 (require 'evil-matchit)
 (global-evil-matchit-mode 1)
 )
   #+END_SRC
** Numbers
   #+BEGIN_SRC emacs-lisp
     (use-package evil-numbers
 :config
 (define-key evil-normal-state-map (kbd "-") 'evil-numbers/dec-at-pt)
 (define-key evil-normal-state-map (kbd "+") 'evil-numbers/inc-at-pt))
   #+END_SRC
** Surround
#+BEGIN_SRC emacs-lisp
(use-package evil-surround
  :config
  (global-evil-surround-mode 1))
#+END_SRC
** Visualstar
#+BEGIN_SRC emacs-lisp
(use-package evil-visualstar
  :config
  (global-evil-visualstar-mode))
#+END_SRC
** Evil Org Mode
   - https://github.com/Somelauw/evil-org-mode/blob/master/doc/keythemes.org
   #+BEGIN_SRC emacs-lisp
     ;;     (use-package evil-org
     ;;       :after org
     ;;       :config
     ;;       (add-hook 'org-mode-hook 'evil-org-mode)
     ;;       (add-hook 'evil-org-mode-hook
     ;;                 (lambda ()
     ;;                   (evil-org-set-key-theme)))
     ;;       (require 'evil-org-agenda)
     ;;       (evil-org-agenda-set-keys)
     ;; (evil-org-set-key-theme '(textobjects insert navigation additional shift todo heading)))
   #+END_SRC
* Navigation
** Company
   #+BEGIN_SRC emacs-lisp
     (use-package company
 :bind (:map company-active-map
		   ("C-n" . company-select-next)
		   ("C-p" . company-select-previous)
		   ("C-d" . company-show-doc-buffer)
		   ("<tab>" . company-complete))

 :init
 (global-company-mode t)
 :config
 (add-hook 'after-init-hook 'global-company-mode)
 (setq company-idle-delay 0)
 (setq company-minimum-prefix-length 2)
 (setq company-show-numbers t
	     company-tooltip-align-annotations t)
 )
   #+END_SRC
*** TODO auto show docs
** Ag
   #+BEGIN_SRC emacs-lisp
   (use-package ag)
   #+END_SRC
** Swiper / Counsel / Ivy
*** Counsel
   #+BEGIN_SRC emacs-lisp
     (use-package counsel
 :config
 (counsel-mode t)
 (global-set-key (kbd "C-c C-r") 'ivy-resume))
     ;; (use-package counsel
     ;;     :bind (("C-x C-f" . counsel-find-file)
     ;; 	   ("M-x" . counsel-M-x)
     ;; 	   ("C-h f" . counsel-describe-function)
     ;; 	   ("C-h v" . counsel-describe-variable)
     ;; 	   ("M-i" . counsel-imenu)
     ;; 	   ("C-c i" . counsel-unicode-char)
     ;; 	   :map read-expression-map
     ;; 	   ("C-r" . counsel-expression-history)))
 #+END_SRC
*** Swiper
    #+BEGIN_SRC emacs-lisp

   (use-package swiper
     :bind (("C-s" . swiper)
	    ("C-r" . swiper)
	    ("C-c C-r" . ivy-resume)
	    :map ivy-minibuffer-map
	    ("C-SPC" . ivy-restrict-to-matches))
     :init
     (ivy-mode 1)
     :config )
    #+END_SRC
** IDO
   #+BEGIN_SRC emacs-lisp
     ;; (require 'ido)
     ;; (ido-mode t)
     ;; (setq ido-enable-flex-matching t
     ;;       ido-everywhere t)
   #+END_SRC
** IMenu
   #+BEGIN_SRC emacs-lisp
   (use-package imenu-list
   :config
 (global-set-key (kbd "M-i") 'imenu)
 (global-set-key (kbd "C-c C-'") #'imenu-list-smart-toggle)
 (setq imenu-list-focus-after-activation t)
 (setq imenu-list-auto-resize t)
 )
   #+END_SRC

   #+RESULTS:
   : t
** Projectile
   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :config
       (projectile-mode +1)
       ;; (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
       (setq projectile-project-search-path '("~/Dropbox/org" "~/code/"))
       (setq projectile-completion-system 'ivy)
       (setq projectile-switch-project-action #'projectile-dired)

       )
   #+END_SRC

   #+RESULTS:
   : t
** Dired-X
 #+BEGIN_SRC emacs-lisp
 (require 'dired-x)
 #+END_SRC
* Hydra and Unbindings
** Use
   #+BEGIN_SRC emacs-lisp
   (use-package hydra)
   #+END_SRC
** C-h
*** Hydra
**** Helpful
     #+BEGIN_SRC emacs-lisp
       (defhydra hydra-helpful (:color blue)
         "Helpful"
         ("a" apropos "apropos")
         ("c" helpful-callable "call")
         ("d" apropos-documentation "doc")
         ("v" helpful-variable "var")
         ("k" helpful-key "key")
         ("p" helpful-at-point "point")
         ;; ("F" helpful-function "func")
         ;; ("c" helpful-command "command")
         ("q" nil "quit")
       )
       (bind-keys ("C-h h" . hydra-helpful/body))

     #+END_SRC

     #+RESULTS:
     : hydra-helpful/body
**** Apropos
     #+BEGIN_SRC emacs-lisp
     (defhydra hydra-apropos (:color blue)
     "Apropos"
     ("a" apropos "apropos")
     ("c" apropos-command "cmd")
     ("d" apropos-documentation "doc")
     ("e" apropos-value "val")
     ("l" apropos-library "lib")
     ("o" apropos-user-option "option")
     ("v" apropos-variable "var")
     ("i" info-apropos "info")
     ("t" tags-apropos "tags")
     ("z" hydra-customize-apropos/body "customize"))

   (defhydra hydra-customize-apropos (:color blue)
     "Apropos (customize)"
     ("a" customize-apropos "apropos")
     ("f" customize-apropos-faces "faces")
     ("g" customize-apropos-groups "groups")
     ("o" customize-apropos-options "options"))

   (bind-keys ("C-h a" . hydra-apropos/body))
     #+END_SRC

     #+RESULTS:
     : hydra-apropos/body
**** Describe
    Don't really need this anymore because of Helpful
     #+BEGIN_SRC emacs-lisp
       ;; (defhydra hydra-describe (:color blue)
       ;;   "Describe"
       ;;   ("b" describe-bindings "bindings")
       ;;   ("m" describe-mode "mode")
       ;;   ("o" describe-symbol "symbol")
       ;;   ("p" describe-package "package")
       ;;   ("s" describe-syntax "syntax")
       ;; )
       ;; (bind-keys ("C-h d" . hydra-describe/body))
     #+END_SRC

     #+RESULTS:
     : hydra-describe/body
**** View
     Will never use this
     #+BEGIN_SRC emacs-lisp
       ;; (defhydra hydra-view (:color blue)
       ;;   "View"
       ;;   ("e" view-echo-area-messages "echo")
       ;;   ("n" view-emacs-news "news")
       ;;   ("p" view-emacs-problems "problems")
       ;;   ("f" view-emacs-FAQ "todo")
       ;;   ("x" view-external-packages "external packages")
       ;;   ("q" nil "quit" :color blue)
       ;; )
       ;; (bind-keys ("C-h v" . hydra-view/body))
     #+END_SRC

     #+RESULTS:
     : hydra-view/body
*** Unbind
**** Apropos
     #+BEGIN_SRC emacs-lisp
     (global-unset-key (kbd "C-h a")) ;; apropos-command
     (global-unset-key (kbd "C-h d")) ;; apropos-documentation
     #+END_SRC
**** View
     #+BEGIN_SRC emacs-lisp
      (global-unset-key (kbd "C-h e")) ;; view-echo-area-messages
      (global-unset-key (kbd "C-h l")) ;; view-echo-area-messages
      (global-unset-key (kbd "C-h n")) ;; view-emacs-news
      (global-unset-key (kbd "C-h C-n")) ;; view-emacs-news
      (global-unset-key (kbd "C-h C-e")) ;; view-external-packages
      (global-unset-key (kbd "C-h C-p")) ;; view-emacs-problems
      (global-unset-key (kbd "C-h C-t")) ;; view-emacs-todo
      (global-unset-key (kbd "C-h C-f")) ;; view-emacs-FAQ
     #+END_SRC
**** Describe
     #+BEGIN_SRC emacs-lisp
       (global-unset-key (kbd "C-h f")) ;; describe-function
       (global-unset-key (kbd "C-h v")) ;; describe-variable
       (global-unset-key (kbd "C-h k")) ;; describe-key
       (global-unset-key (kbd "C-h C")) ;; describe-coding-system
       (global-unset-key (kbd "C-h P")) ;; describe-package
       (global-unset-key (kbd "C-h c")) ;; describe-key-briefly
       (global-unset-key (kbd "C-h g")) ;; describe-gnu-project
       (global-unset-key (kbd "C-h C-w")) ;; describe-no-warranty
       (global-unset-key (kbd "C-h C-o")) ;; describe-distribution
       (global-unset-key (kbd "C-h C-c")) ;; describe-copying
       (global-unset-key (kbd "C-h C-\\")) ;; describe-input-method
       (global-unset-key (kbd "C-h I")) ;; describe-input-method
       (global-unset-key (kbd "C-h L")) ;; describe-language-environment
       (global-unset-key (kbd "C-h o")) ;; describe-symbol
       (global-unset-key (kbd "C-h b")) ;; describe-bindings
       (global-unset-key (kbd "C-h s")) ;; describe-syntax
       (global-unset-key (kbd "C-h m")) ;; describe-mode
     #+END_SRC

     #+RESULTS:

     #+BEGIN_SRC emacs-lisp
       (global-unset-key (kbd "C-h C-d")) ;; view-emacs-debugging
       (global-unset-key (kbd "C-h F")) ;; Info-goto-emacs-key-command
     #+END_SRC
**** Everything else
     #+BEGIN_SRC emacs-lisp
       (global-unset-key (kbd "C-h r")) ;; info-emacs-manual
       (global-unset-key (kbd "C-h t")) ;; help-with-tutorial
       (global-unset-key (kbd "C-h C-a")) ;; about-emacs
       (global-unset-key (kbd "C-h K")) ;; info-goto-emacs-key-command-node
       (global-unset-key (kbd "C-h S")) ;; info-lookup-symbol
     #+END_SRC

     #+RESULTS:
** C-x
*** Unbindings
    #+BEGIN_SRC emacs-lisp
      (global-unset-key (kbd "C-x C-l")) ;; downcase-region
      (global-unset-key (kbd "C-x C-u")) ;; upcase-region
      (global-unset-key (kbd "C-x C-t")) ;; tranpose-lines
      (global-unset-key (kbd "C-x C-<left>")) ;; prev-buffer
      (global-unset-key (kbd "C-x C-<right>")) ;; next-buffer
      (global-unset-key (kbd "C-x C-<right>")) ;; next-buffer
      (global-unset-key (kbd "C-x C-<right>")) ;; next-buffer
    #+END_SRC

    #+RESULTS:
** Projectile
    #+BEGIN_SRC emacs-lisp

      ;; C        projectile-configure-project
      ;; P        projectile-test-project

      ;; R        projectile-regenerate-tags
      ;; j        projectile-find-tag

      ;; S        projectile-save-project-buffers
      ;; V        projectile-browse-dirty-projects
      ;; c        projectile-compile-project

      ;; m        projectile-commander
      ;; o        projectile-multi-occur
      ;; r        projectile-replace
      ;; s g      projectile-grep
      ;; s r      projectile-ripgrep
      ;; s s      projectile-ag
      ;; t        projectile-toggle-between-implementation-and-test

      ;; !        projectile-run-shell-command-in-root
      ;; &        projectile-run-async-shell-command-in-root
      ;; u        projectile-run-project
      ;; x e      projectile-run-eshell
      ;; x i      projectile-run-ielm
      ;; x s      projectile-run-shell
      ;; x t      projectile-run-term

      ;; i        projectile-invalidate-cache
      ;; z        projectile-cache-current-file

      (defhydra hydra-projectile (:color blue :hint nil)
        "Projectile"

        ("l"        projectile-project-buffers-other-buffer "Last Buffer" :column "Buffer")
        ("b"        projectile-switch-to-buffer "Switch Buffer")
        ("i"        projectile-ibuffer "IBuffer")

        ("f"        projectile-find-file-dwim "Find File" :column "File System")
        ("-"        projectile-dired "Dired")
        ("d"        projectile-find-dir "Find Dir")

        ("ps"       projectile-switch-open-project "Switch Project" :column "Project")
        ("pf"       projectile-switch-project "Find Project")
        ("g"        projectile-vc "Git")

        ("q"        nil "quit" :color blue :column "Quit"))

        ;; ("<left>"   projectile-previous-project-buffer "Prev Buf" :color red)
        ;; ("<right>"  projectile-next-project-buffer "Next Buf" :color red :column "Buffer")

        ;; ("a"        projectile-find-other-file "Find Alternate File")
        ;; ("F"        projectile-find-file-in-known-projects "Dired")
        ;; ("t"        projectile-find-test-file "Dired")
        ;; ("l"        projectile-find-file-in-directory "Dired")
        ;; ("r"        projectile-recentf "Recent File")
      (bind-keys ("C-c p" . hydra-projectile/body))
    #+END_SRC

    #+RESULTS:
    : hydra-projectile/body
** Window
*** Hydra
    #+BEGIN_SRC emacs-lisp
      (defhydra hydra-window ()
        "Window"
      ("u" enlarge-window "h+")
      ("j" shrink-window "h-")
      ("e" enlarge-window-horizontally "w+")
      ("d" shrink-window-horizontally "w-")
      ("s" split-window-below "horizontal" :color blue)
      ("v" split-window-right "vertical" :color blue)
      ("0" delete-window "delete" :color blue)
      ("o" delete-other-windows "only" :color blue)
      ("=" balance-windows "balance" :color blue)
      ("q" nil "exit" :color blue))
         (bind-keys ("C-x w" . hydra-window/body))
    #+END_SRC

    #+RESULTS:
    : hydra-window/body
*** Unbindings
    #+BEGIN_SRC emacs-lisp
    (global-unset-key (kbd "C-x 0")) ;; delete-window
    (global-unset-key (kbd "C-x 1")) ;; delete-other-windows
    (global-unset-key (kbd "C-x 2")) ;; split-window-below
    (global-unset-key (kbd "C-x 3")) ;; split-window-right
    (global-unset-key (kbd "C-x 5")) ;; +ctl-x-5-prefix ; operate on other frames
    (global-unset-key (kbd "C-x +")) ;; balance-windows
    (global-unset-key (kbd "C-x ^")) ;; enlarge-window
    (global-unset-key (kbd "C-x {")) ;; shrink-window-horizontally
    (global-unset-key (kbd "C-x }")) ;; enlarge-window-horizontally
    #+END_SRC

    #+RESULTS:
** Zoom
*** Hydra
  #+BEGIN_SRC emacs-lisp
      (defhydra hydra-zoom ()
        "zoom"
        ("=" text-scale-increase "in")
        ("-" text-scale-decrease "out")
        ("0" (text-scale-adjust 0) "reset")
        ("q" nil "quit" :color blue))
      (bind-keys ("C-x C-=" . hydra-zoom/body))
    #+END_SRC

    #+RESULTS:
    : hydra-zoom/body
*** Unbind
    #+BEGIN_SRC emacs-lisp
    (global-unset-key (kbd "C-x C-0")) ;; reset
    (global-unset-key (kbd "C-x C-+")) ;; text-scale-increase
    (global-unset-key (kbd "C-x C--")) ;; text-scale-decrease
    #+END_SRC

    #+RESULTS:
** Transpose
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c t")
                     (defhydra hydra-transpose (:color red)
                       "Transpose"
                       ("c" transpose-chars "characters")
                       ("w" transpose-words "words")
                       ("o" org-transpose-words "Org mode words")
                       ("l" transpose-lines "lines")
                       ("s" transpose-sentences "sentences")
                       ("e" org-transpose-elements "Org mode elements")
                       ("p" transpose-paragraphs "paragraphs")
                       ("t" org-table-transpose-table-at-point "Org mode table")
                       ("q" nil "cancel" :color blue)))
   #+END_SRC

   #+RESULTS:
   : hydra-transpose/body
** TODO HideShow
   #+BEGIN_SRC emacs-lisp
     (defhydra hydra-hs (:idle 1.0)
       "
     Hide^^            ^Show^            ^Toggle^    ^Navigation^
     ----------------------------------------------------------------
     _h_ hide all      _s_ show all      _t_oggle    _n_ext line
     _d_ hide block    _a_ show block              _p_revious line
     _l_ hide level

     _SPC_ cancel
     "
       ("s" hs-show-all)
       ("h" hs-hide-all)
       ("a" hs-show-block)
       ("d" hs-hide-block)
       ("t" hs-toggle-hiding)
       ("l" hs-hide-level)
       ("n" forward-line)
       ("p" (forward-line -1))
       ("SPC" nil)
       )

     ;; (global-set-key (kbd "C-c @") 'hydra-hs/body)
      (bind-keys ("C-c @" . hydra-hs/body))
   #+END_SRC

   #+RESULTS:
   : hydra-hs/body
* Coding
** Flycheck
   #+BEGIN_SRC emacs-lisp
   (use-package flycheck
 :config (global-flycheck-mode))
   #+END_SRC
** Smartparens
   #+BEGIN_SRC emacs-lisp
     (use-package smartparens
       :config (require 'smartparens-config)
       (add-hook 'js-mode-hook #'smartparens-mode))

   #+END_SRC
** Autopair
   #+BEGIN_SRC emacs-lisp
     (use-package autopair
       :config (autopair-global-mode))
   #+END_SRC
** YASnippets
   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :config (yas-global-mode 1))
   #+END_SRC
   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet-snippets
       :config )
   #+END_SRC
* Language
** Javascript
*** js2-mode
    Mainly used for syntax parsing, a dependency for other packages
    #+BEGIN_SRC emacs-lisp
      (use-package js2-mode
  :config
  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
  (add-to-list 'interpreter-mode-alist '("node" . js2-mode))
  (setq js2-strict-missing-semi-warning nil) ;; using flycheck and eslint
  ;; (add-to-list 'auto-mode-alist '("\\.jsx?\\'" . js2-jsx-mode)) ; jsx support
  )
    #+END_SRC

    #+RESULTS:
    : t
*** js2-refactor
    https://github.com/magnars/js2-refactor.el
    #+BEGIN_SRC emacs-lisp
      (use-package js2-refactor
  :config
  (add-hook 'js2-mode-hook #'js2-refactor-mode)
  (setq js2-skip-preprocessor-directives t)
  (js2r-add-keybindings-with-prefix "C-c C-j")
  )
    #+END_SRC
*** Tern
  #   #+BEGIN_SRC emacs-lisp
  #     (use-package tern

  #     (use-package company-tern
  # :config
  # (add-to-list 'company-backends 'company-tern)
  # (add-hook 'js2-mode-hook (lambda ()
  #  			(tern-mode)
  #  			(company-mode))))
  #   #+END_SRC
*** Indium
    #+BEGIN_SRC emacs-lisp
      ;;     (use-package tern
      ;; :config
      ;; (autoload 'tern-mode "tern.el" nil t)
      ;; (add-hook 'js-mode-hook (lambda () (tern-mode t))))
    #+END_SRC
** Typescript
   #+BEGIN_SRC emacs-lisp
     (use-package typescript-mode)
     ;; (use-package tide)
   #+END_SRC
       :config
       (defun setup-tide-mode ()
         (interactive)
         (tide-setup)
         (flycheck-mode +1)
         (setq flycheck-check-syntax-automatically '(save mode-enabled))
         (eldoc-mode +1)
         (tide-hl-identifier-mode +1)
         ;; company is an optional dependency. You have to
         ;; install it separately via package-install
         ;; `M-x package-install [ret] company`
         (company-mode +1))

       ;; aligns annotation to the right hand side
       (setq company-tooltip-align-annotations t)

       ;; formats the buffer before saving
       (add-hook 'before-save-hook 'tide-format-before-save)
       (add-hook 'typescript-mode-hook #'setup-tide-mode)
** Go
   #+BEGIN_SRC emacs-lisp
   (use-package go-mode)
   #+END_SRC
** YAML
   #+BEGIN_SRC emacs-lisp
       (use-package yaml-mode
     :config
        (add-to-list 'auto-mode-alist '("\\.yaml\\'" . yaml-mode)))

     ;; Unlike python-mode, this mode follows the Emacs convention of not
     ;; binding the ENTER key to `newline-and-indent'.  To get this
     ;; behavior, add the key definition to `yaml-mode-hook':

     ;;    (add-hook 'yaml-mode-hook
     ;;     '(lambda ()
     ;;        (define-key yaml-mode-map "\C-m" 'newline-and-indent)))
   #+END_SRC
 #+BEGIN_SRC emacs-lisp
   (use-package highlight-indentation
     :config
     (set-face-background 'highlight-indentation-face "#e3e3d3")
   (set-face-background 'highlight-indentation-current-column-face "#c3b3b3"))
 #+END_SRC
 #+BEGIN_SRC emacs-lisp
 (defun aj-toggle-fold ()
   "Toggle fold all lines larger than indentation on current line"
   (interactive)
   (let ((col 1))
     (save-excursion
       (back-to-indentation)
       (setq col (+ 1 (current-column)))
       (set-selective-display
        (if selective-display nil (or col 1))))))
 (global-set-key [(M C i)] 'aj-toggle-fold)
 #+END_SRC
** Markdown
   #+BEGIN_SRC emacs-lisp
     (use-package markdown-mode
     :mode (("README\\.md\\'" . gfm-mode)
             ("\\.md\\'" . markdown-mode)
             ("\\.markdown\\'" . markdown-mode))
     :init (setq markdown-command "multimarkdown"))
   #+END_SRC
* Porcelain
** Docker
   #+BEGIN_SRC emacs-lisp
   (use-package docker
   :bind ("C-c d" . docker))
   #+END_SRC
** Magit
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :bind ("C-c g" . magit-status))
     ;; (use-package evil-magit)
   #+END_SRC
** Kubernetes
   #+BEGIN_SRC emacs-lisp
       (use-package kubernetes
       :bind ("C-c k" . kubernetes-overview)
     :commands (kubernetes-overview))

   #+END_SRC

     ;; If you want to pull in the Evil compatibility package.
     ;; (use-package kubernetes-evil
     ;;   :after kubernetes)

   #+RESULTS:
** Terraform
   #+BEGIN_SRC emacs-lisp
   (use-package terraform-mode
   :config )
   #+END_SRC
* Mu4e
#+BEGIN_SRC emacs-lisp
  ;; (add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu/mu4e")
  ;; (require 'mu4e)
  ;; (setq
  ;;   mu4e-maildir "~/Maildir/tangj1122")
#+END_SRC
