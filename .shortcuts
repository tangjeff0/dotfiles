useful command line shortcuts
source: https://github.com/0nn0/terminal-mac-cheatsheet

# Writing
Ctrl + WTFPLCut one word backwards using white space as delimiter
# Ctrl + H - backspace
# Ctrl + YPaste whatever was cut by the last cut command  
# Ctrl + _Undo the last command. (Underscore. So it's actually Ctrl +  Shift + minus)

# Command History
![value]Execute the last command typed that starts with ‘value’
!!Execute the last c        ommand typed

# File Management
pbcopy < [file]Copies file contents to clipboard
pbpaste Paste clipboard contents
pbpaste > [file]Past clipboard contents into fi le, pbpaste > paste-test.txt

# Search
find [dir] -name [search_pattern]Search for files, e.g. find /Users -name "file.t xt"
grep [search_pattern] [file]Search for all lines that contain the     pattern, e.g. grep "Tom" file.txt
grep -r [search_pattern] [file]Recur  sively search for all lines that contain the pattern
grep -v [search_pattern] [file]Search for all lines that do NOT contain the pattern   

# Openning New Tabs
open -a Terminal `pwd`

# Knowledge
echo $0 # shell knowledge
uname -a # OS knowledge


# Custom terminals
# bash
# write a function to compute the current git branch
parse_git_branch() {
      git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}
# if using VM
if [ "$color_prompt" = yes ]; then
    PS1="\[$(tput setaf 6)\]\u@\h: \w\[\e[0;33;49m\] \$(parse_git_branch)\[\e[0;0m\]$ "
else
    PS1="\[$(tput setaf 6)\]\u@\h: \w\[\e[0;33;49m\] \$(parse_git_branch)\[\e[0;0m\]$ "
fi
# otherwise
export PS1="\u@\h \[\033[32m\]\w\[\033[33m\]\$(parse_git_branch)\[\033[00m\] $ "


# https://www.cs.oberlin.edu/~kuperman/help/vim/windows.html
 :e filename      - edit another file
 :split filename  - split window and load another file
 ctrl-w up arrow  - move cursor up a window
 ctrl-w ctrl-w    - move cursor to another window (cycle)
 ctrl-w_          - maximize current window
 ctrl-w=          - make all equal size
 10 ctrl-w+       - increase window size by 10 lines
 :vsplit file     - vertical split
 :sview file      - same as split, but readonly
 :hide            - close current window
 :only            - keep only this window open
 :ls              - show current buffers
 :b 2             - open buffer #2 in this window

# VIM
:! - run terminal command from vim
While in insert mode, you can use Ctrl-R {register}, where register can be:

+ for the clipboard,
* for the X clipboard (last selected text in X),
" for the unnamed register (last delete or yank in Vim),
or a number of others (see :h registers).
Ctrl-R {register} inserts the text as if it were typed.

Ctrl-R Ctrl-O {register} inserts the text with the original indentation.

Ctrl-R Ctrl-P {register} inserts the text and auto-indents it.
